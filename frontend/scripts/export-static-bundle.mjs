import { promises as fs } from "node:fs";
import path from "node:path";

const frontendRoot = process.cwd();
const projectRoot = path.resolve(frontendRoot, "..");
const distDir = path.join(projectRoot, "dist", "client");
const assetDir = path.join(distDir, "assets");
const outputFile = path.join(projectRoot, "src", "frontend", "static-bundle.ts");

async function main() {
  const exists = await fs.access(distDir).then(() => true).catch(() => false);
  if (!exists) {
    console.warn(`[export-static-bundle] Skipping: missing ${distDir}`);
    return;
  }

  const files = ["index.html"];
  const assetExists = await fs.access(assetDir).then(() => true).catch(() => false);
  if (assetExists) {
    const names = await fs.readdir(assetDir);
    names.sort();
    for (const name of names) {
      files.push(path.posix.join("assets", name));
    }
  }

  const bundle = {};
  for (const rel of files) {
    const abs = path.join(distDir, rel);
    const data = await fs.readFile(abs, "utf8");
    bundle[rel] = data;
  }

  const header = "// Auto-generated by frontend/scripts/export-static-bundle.mjs.";
  const lines = [
    `${header}\nexport const STATIC_BUNDLE = ${JSON.stringify(bundle, null, 2)} as const;`,
    "export type StaticBundleKey = keyof typeof STATIC_BUNDLE;",
  ];

  await fs.writeFile(outputFile, lines.join("\n") + "\n", "utf8");
  console.log(`[export-static-bundle] Wrote ${files.length} assets to ${path.relative(projectRoot, outputFile)}`);
}

main().catch((err) => {
  console.error("[export-static-bundle] Failed:", err);
  process.exitCode = 1;
});
